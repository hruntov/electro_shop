services:
  mywebsite:
    build:
      context: .
      dockerfile: Dockerfile
    image: mywebsite:tag
    container_name: mywebsite
    networks:
      - mynetwork
    ports:
      - 5555:5555
      - 8000:8000
      - 35729:35729
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s
    volumes:
      - .:/shop
    depends_on:
      - rabbitmq
      - db
      - redis
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - SECRET_WAYFORPAY_KEY=${SECRET_WAYFORPAY_KEY}
      - WAYFORPAY_MERCHANT_LOGIN=${WAYFORPAY_MERCHANT_LOGIN}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_DB=${REDIS_DB}


  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - mynetwork

  db:
    image: postgres:13
    container_name: db
    restart: always
    networks:
       - mynetwork
    volumes:
       - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "db_prod"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    ports:
       - 5432:5432
    environment:
       - POSTGRES_DB=${POSTGRES_DB}
       - POSTGRES_USER=${POSTGRES_USER}
       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
       - POSTGRES_HOST=${POSTGRES_HOST}
       - POSTGRES_PORT=${POSTGRES_PORT}

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - mynetwork
    ports:
      - 6379:6379


networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
